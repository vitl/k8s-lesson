- hosts: all
  become: yes
  tasks:
    - name: load overlay module
      modprobe:
        name: overlay
        state: present

    - name: load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: configure loading kernel modules
      copy:
        dest: "/etc/modules-load.d/containerd.conf"
        content: |
          overlay
          br_netfilter

    - name: configure network keys for kubernetes
      copy:
        dest: "/etc/sysctl.d/kubernetes.conf"
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: apply configure network keys
      shell: sysctl --system

    - name: Add Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/trusted.gpg.d/docker.asc
        mode: '0644'
        force: true

    - name: add Kubernetes GPG key
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg.asc
        dest: /etc/apt/trusted.gpg.d/google.asc
        mode: '0644'
        force: true

    - name: Get DEB architecture
      shell: dpkg --print-architecture
      register: deb_architecture

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch={{ deb_architecture.stdout }}] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable
        state: present
        filename: 'docker'

    - name: add Kubernetes APT repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: Install dependencies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - curl
        - ca-certificates
        - gnupg2
        - software-properties-common
        - gnupg-agent
        - apt-transport-https
        - containerd.io
        - jq
        # - qemu-guest-agent

    - name: save containerd config
      shell: containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

    - name: fix containerd config
    #   shell: sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart service containerd, in all cases
      ansible.builtin.systemd:
        name: containerd.service
        state: restarted
        enabled: yes

    - name: Install kubelet, kubeadm
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600
      vars:
        packages:
        - kubelet={{ kubernetes_version }}
        - kubeadm={{ kubernetes_version }}

    - name: Hold kubelet
      dpkg_selections:
        name: kubelet
        selection: hold

    - name: Hold kubeadm
      dpkg_selections:
        name: kubeadm
        selection: hold

- hosts: control_plane
  become: yes
  tasks:
  - name: install kubectl
    ansible.builtin.apt:
      name: kubectl={{ kubernetes_version }}
      state: present
      force: yes

  - name: Hold kubectl
    dpkg_selections:
      name: kubectl
      selection: hold

  - name: Install bash-completion
    apt:
      name: bash-completion 
      state: present

  - name: install kubectl completion for bash
    shell:
      cmd: kubectl completion bash > /etc/bash_completion.d/kubectl
      # If you do not want to run this when the file already exists, add
      creates: /etc/bash_completion.d/kubectl